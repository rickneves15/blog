// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "../src/shared/models" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
}

model user {
  id String @id @default(uuid())

  name     String
  email    String @unique
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Comment   Comment[]
}

model file {
  id String @id @default(uuid())

  name          String
  contentLength Int
  contentType   String
  url           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model Post {
  id String @id @default(uuid())

  title          String
  description    String
  vizualizations Int?   @default(0)
  unlikes        Int?   @default(0)
  likes          Int?   @default(0)

  user   user   @relation(fields: [userId], references: [id])
  userId String

  file   file   @relation(fields: [fileId], references: [id])
  fileId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Comment {
  id String @id @default(uuid())

  description String
  isDeleted   Boolean? @default(false)

  user   user   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
